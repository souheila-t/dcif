resultFilename :PUZ008-3.C1i2
nethod:SOLAR-Inc
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:
timout :600000
>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [599795, 116052992, 15958859, 17485222, 0, 4497431, 0, 0]
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
Error: invalid operation merge with -greater_or_equal(n0,s(s(n0)))
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
Error: invalid operation merge with -greater_or_equal(n0,s(s(n0)))
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
Error: invalid operation merge with -greater_or_equal(n0,s(s(n0)))
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
Error: invalid operation merge with -greater_or_equal(n0,s(s(n0)))
Error: invalid operation merge with -greater_or_equal(n0,s(s(n0)))
Error: invalid operation merge with -greater_or_equal(n0,s(s(n0)))
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
Error: invalid operation merge with -greater_or_equal(s(n0),s(s(n0)))
Error: invalid operation merge with -greater_or_equal(n0,s(s(n0)))
Error: invalid operation merge with -greater_or_equal(n0,s(s(n0)))
Error: invalid operation merge with -greater_or_equal(n0,s(s(n0)))
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
Error: invalid operation merge with -greater_or_equal(n0,s(s(n0)))
Error: invalid operation merge with -greater_or_equal(s(s(s(n0))),n0)
SolveToClause Finished!
55 CHARACTERISTIC CLAUSES

[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatonwest,east(m(s(s(n0))),c(s(n0))))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(n0)),boatoneast,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[+achievable(west(m(n0),c(s(n0))),boatoneast,east(m(s(s(s(n0)))),c(s(s(n0)))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[+achievable(west(m(n0),c(n0)),boatoneast,east(m(s(s(s(n0)))),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(s(n0))),c(n0)),boatonwest,east(m(s(n0)),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(n0)),boatonwest,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(n0)),boatonwest,east(m(s(s(n0))),c(s(s(s(n0))))))]
[+achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(s(n0))),c(n0)),boatonwest,east(m(s(n0)),c(s(s(s(n0))))))]
[+achievable(west(m(s(s(s(n0)))),c(s(n0))),boatonwest,east(m(n0),c(s(s(n0)))))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(s(n0))),c(n0)),boatoneast,east(m(s(n0)),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(n0),c(s(n0))),boatonwest,east(m(s(s(s(n0)))),c(s(s(n0)))))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(n0)))),boatoneast,east(m(n0),c(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(n0)),boatonwest,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(n0)),boatoneast,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(s(n0))),c(n0)),boatoneast,east(m(s(n0)),c(s(s(s(n0))))))]
[+achievable(west(m(s(s(s(n0)))),c(s(n0))),boatoneast,east(m(n0),c(s(s(n0)))))]
[+achievable(west(m(n0),c(s(s(s(n0))))),boatonwest,east(m(s(s(s(n0)))),c(n0)))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatonwest,east(m(s(n0)),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(n0)),boatoneast,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatonwest,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(s(n0))),c(s(n0))),boatonwest,east(m(s(n0)),c(s(s(n0)))))]
[+achievable(west(m(s(n0)),c(s(n0))),boatoneast,east(m(s(s(n0))),c(s(s(n0)))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(n0))),boatoneast,east(m(s(n0)),c(s(s(n0)))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatonwest,east(m(s(n0)),c(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatonwest,east(m(s(n0)),c(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(n0))),boatonwest,east(m(s(n0)),c(s(s(n0)))))]
[-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(n0)),boatoneast,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(n0)))),boatonwest,east(m(n0),c(s(n0))))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatonwest,east(m(s(n0)),c(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
[+achievable(west(m(s(n0)),c(s(n0))),boatonwest,east(m(s(s(n0))),c(s(s(n0)))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[+achievable(west(m(n0),c(s(s(n0)))),boatonwest,east(m(s(s(s(n0)))),c(s(n0))))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatonwest,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(s(n0))),c(s(n0))),boatoneast,east(m(s(n0)),c(s(s(n0)))))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatonwest,east(m(s(s(n0))),c(s(n0))))]


Total execution time was 614857 ms.


Execution time was 614851 ms.

status 103
---System Timeout---
SOLAR PROBLEM
PUZ008-3.C1i2_all_ld-1--1_SOLAR-Inc
------------------  TIME OUT --------------------
resultFilename :PUZ008-3.C1i2
nethod:Solar-Carc
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:
timout :600000
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [+safe(n0,_0)]
 [-greater_or_equal(_0,_1), +safe(_0,_1)]
 [+greater_or_equal(_0,n0)]
 [+greater_or_equal(s(_0),s(_1)), -greater_or_equal(_0,_1)]
 [-achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3))))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -safe(_0,s(_1)), -safe(_2,_3), +achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3)))))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -safe(_0,s(s(_1))), -safe(_2,_3), +achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -safe(s(_0),_1), -safe(_2,_3), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -safe(s(s(_0)),_1), -safe(_2,_3), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3)))), -safe(s(_0),s(_1)), -safe(_2,_3), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Production field:
 [+safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [599760, 112625664, 15509755, 16987861, 0, 4402456, 0, 0]
Solver finished.
SolveToClause Finished!
55 CHARACTERISTIC CLAUSES

[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatonwest,east(m(s(s(n0))),c(s(n0))))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(n0)),boatoneast,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[+achievable(west(m(n0),c(s(n0))),boatoneast,east(m(s(s(s(n0)))),c(s(s(n0)))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[+achievable(west(m(n0),c(n0)),boatoneast,east(m(s(s(s(n0)))),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(s(n0))),c(n0)),boatonwest,east(m(s(n0)),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(n0)),boatonwest,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(n0)),boatonwest,east(m(s(s(n0))),c(s(s(s(n0))))))]
[+achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(s(n0))),c(n0)),boatonwest,east(m(s(n0)),c(s(s(s(n0))))))]
[+achievable(west(m(s(s(s(n0)))),c(s(n0))),boatonwest,east(m(n0),c(s(s(n0)))))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(s(n0))),c(n0)),boatoneast,east(m(s(n0)),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(n0),c(s(n0))),boatonwest,east(m(s(s(s(n0)))),c(s(s(n0)))))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(n0)))),boatoneast,east(m(n0),c(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(n0)),boatonwest,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(n0)),boatoneast,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(s(n0))),c(n0)),boatoneast,east(m(s(n0)),c(s(s(s(n0))))))]
[+achievable(west(m(s(s(s(n0)))),c(s(n0))),boatoneast,east(m(n0),c(s(s(n0)))))]
[+achievable(west(m(n0),c(s(s(s(n0))))),boatonwest,east(m(s(s(s(n0)))),c(n0)))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatonwest,east(m(s(n0)),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(n0)),boatoneast,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatonwest,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(s(n0))),c(s(n0))),boatonwest,east(m(s(n0)),c(s(s(n0)))))]
[+achievable(west(m(s(n0)),c(s(n0))),boatoneast,east(m(s(s(n0))),c(s(s(n0)))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(n0))),boatoneast,east(m(s(n0)),c(s(s(n0)))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatonwest,east(m(s(n0)),c(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatonwest,east(m(s(n0)),c(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(n0))),boatonwest,east(m(s(n0)),c(s(s(n0)))))]
[-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(n0)),boatoneast,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(n0)))),boatonwest,east(m(n0),c(s(n0))))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatonwest,east(m(s(n0)),c(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
[+achievable(west(m(s(n0)),c(s(n0))),boatonwest,east(m(s(s(n0))),c(s(s(n0)))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[+achievable(west(m(n0),c(s(s(n0)))),boatonwest,east(m(s(s(s(n0)))),c(s(n0))))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatonwest,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(s(n0))),c(s(n0))),boatoneast,east(m(s(n0)),c(s(s(n0)))))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatonwest,east(m(s(s(n0))),c(s(n0))))]


Total execution time was 613686 ms.


Execution time was 613683 ms.

status 103
---System Timeout---
SOLAR PROBLEM
PUZ008-3.C1i2_all_ld-1--1_Solar-Carc
------------------  TIME OUT --------------------
resultFilename :PUZ008-3.C1i2
nethod:Solar
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:
timout :600000
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [+safe(n0,_0)]
 [-greater_or_equal(_0,_1), +safe(_0,_1)]
 [+greater_or_equal(_0,n0)]
 [+greater_or_equal(s(_0),s(_1)), -greater_or_equal(_0,_1)]
 [-achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3))))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -safe(_0,s(_1)), -safe(_2,_3), +achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3)))))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -safe(_0,s(s(_1))), -safe(_2,_3), +achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -safe(s(_0),_1), -safe(_2,_3), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -safe(s(s(_0)),_1), -safe(_2,_3), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3)))), -safe(s(_0),s(_1)), -safe(_2,_3), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Top clauses:
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Production field:
 [+safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [599732, 149061632, 20373136, 22354008, 0, 5587752, 0, 0]
Solver finished.
SolveToClause Finished!
58 CHARACTERISTIC CLAUSES

[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatoneast,east(m(s(n0)),c(n0)))]
[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatonwest,east(m(s(s(n0))),c(s(n0))))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(n0)),boatoneast,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[+achievable(west(m(n0),c(s(n0))),boatoneast,east(m(s(s(s(n0)))),c(s(s(n0)))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[+achievable(west(m(n0),c(n0)),boatoneast,east(m(s(s(s(n0)))),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(s(n0))),c(n0)),boatonwest,east(m(s(n0)),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(n0)),boatonwest,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(n0)),boatonwest,east(m(s(s(n0))),c(s(s(s(n0))))))]
[+achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(s(n0))),c(n0)),boatonwest,east(m(s(n0)),c(s(s(s(n0))))))]
[+achievable(west(m(s(s(s(n0)))),c(s(n0))),boatonwest,east(m(n0),c(s(s(n0)))))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(s(n0))),c(n0)),boatoneast,east(m(s(n0)),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(n0),c(s(n0))),boatonwest,east(m(s(s(s(n0)))),c(s(s(n0)))))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(n0)))),boatoneast,east(m(n0),c(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(n0)),boatonwest,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(n0)),boatoneast,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(s(n0))),c(n0)),boatoneast,east(m(s(n0)),c(s(s(s(n0))))))]
[+achievable(west(m(s(s(s(n0)))),c(s(n0))),boatoneast,east(m(n0),c(s(s(n0)))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatoneast,east(m(s(n0)),c(n0)))]
[+achievable(west(m(n0),c(s(s(s(n0))))),boatonwest,east(m(s(s(s(n0)))),c(n0)))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatonwest,east(m(s(n0)),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(n0)),boatoneast,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatoneast,east(m(s(n0)),c(n0)))]
[-greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatonwest,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(s(n0))),c(s(n0))),boatonwest,east(m(s(n0)),c(s(s(n0)))))]
[+achievable(west(m(s(n0)),c(s(n0))),boatoneast,east(m(s(s(n0))),c(s(s(n0)))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(n0))),boatoneast,east(m(s(n0)),c(s(s(n0)))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatonwest,east(m(s(n0)),c(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatonwest,east(m(s(n0)),c(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(n0))),boatonwest,east(m(s(n0)),c(s(s(n0)))))]
[-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(n0)),boatoneast,east(m(s(s(n0))),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(n0)))),boatonwest,east(m(n0),c(s(n0))))]
[-greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatonwest,east(m(s(n0)),c(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
[+achievable(west(m(s(n0)),c(s(n0))),boatonwest,east(m(s(s(n0))),c(s(s(n0)))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(s(s(n0)))),c(n0)),boatonwest,east(m(n0),c(s(s(s(n0))))))]
[+achievable(west(m(n0),c(s(s(n0)))),boatonwest,east(m(s(s(s(n0)))),c(s(n0))))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatonwest,east(m(s(s(n0))),c(n0)))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(s(n0))),c(s(n0))),boatoneast,east(m(s(n0)),c(s(s(n0)))))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(n0),c(s(s(s(n0))))),boatoneast,east(m(s(s(s(n0)))),c(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatonwest,east(m(s(s(n0))),c(s(n0))))]


Total execution time was 616329 ms.


Execution time was 616311 ms.

status 103
---System Timeout---
SOLAR PROBLEM
PUZ008-3.C1i2_all_ld-1--1_Solar
------------------  TIME OUT --------------------
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet2
timout :600000
Time for creating graph: 0.126s
Sys -> Ag0 : {New neighbour}
Sys -> Ag1 : {New neighbour}
Ag0 <------  {New neighbour}
Sys -> Ag0 : {Start}
Sys -> Ag1 : {Start}
Sys -> Ag0 : {Launch}
Sys -> Ag1 : {Launch}
Ag1 <------  {New neighbour}
Ag0 <------  {Start}
Ag1 <------  {Start}
Ag0 -> Sys : {Started}
Ag0 <------  {Launch}
Sys <------  {Started}
Ag1 -> Sys : {Started}
Ag1 <------  {Launch}
Sys <------  {Started}
Ag0 receives []
After pruning []
Input Languages : {Ag1=[+achievable(_0,_1,_2), -safe(_0,_1), -achievable(_0,_1,_2)]}
Ag0: updated receivedCl []
updated lstCsq []
Ag0 -> Ag1 : Send Clauses : []
Ag1 <------  Send Clauses : []
Ag1 receives [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Input Languages : {}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [+safe(n0,_0)]
 [-greater_or_equal(_0,_1), +safe(_0,_1)]
 [+greater_or_equal(_0,n0)]
 [+greater_or_equal(s(_0),s(_1)), -greater_or_equal(_0,_1)]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -safe(_0,s(_1)), -safe(_2,_3), +achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -safe(_0,s(s(_1))), -safe(_2,_3), +achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Top clauses:
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Production field:
 [+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [222, 876, 191, 217, 0, 44, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1: updated receivedCl []
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
After pruning [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Input Languages : {Ag1=[+achievable(_0,_1,_2), -safe(_0,_1), -achievable(_0,_1,_2)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3))))]
 [-achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3)))))]
 [-achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -safe(s(_0),_1), -safe(_2,_3), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -safe(s(s(_0)),_1), -safe(_2,_3), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3)))), -safe(s(_0),s(_1)), -safe(_2,_3), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Top clauses:
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -safe(_0,_1), -achievable(_0,_1,_2), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [23, 47, 15, 15, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(n0,s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 -> Ag1 : Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 <------  Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 receives [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning []
Input Languages : {}
Ag1: updated receivedCl []
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : []
Ag0 <------  Send Clauses : []
Ag0 receives [[-greater_or_equal(n0,s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
After pruning []
Input Languages : {Ag1=[+achievable(_0,_1,_2), -safe(_0,_1), -achievable(_0,_1,_2)]}
Ag0: updated receivedCl [[-greater_or_equal(n0,s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 -> Sys : Send Consequences : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Sys <------  Send Consequences : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 -> Sys : {Finish}
Sys <------  {Finish}
Sys -> Ag0 : {Finish}
Sys -> Ag1 : {Finish}
Ag0 <------  {Finish}
Ag1 <------  {Finish}
2 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1168 ms.

Execution time was 1002 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star-FixedRoot-1
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet2
timout :600000
Time for creating graph: 0.096s
Sys -> Ag0 : {New neighbour}
Sys -> Ag1 : {New neighbour}
Sys -> Ag0 : {Start}
Sys -> Ag1 : {Start}
Sys -> Ag0 : {Launch}
Sys -> Ag1 : {Launch}
Ag0 <------  {New neighbour}
Ag0 <------  {Start}
Ag0 -> Sys : {Started}
Ag0 <------  {Launch}
Ag1 <------  {New neighbour}
Ag1 <------  {Start}
Ag1 -> Sys : {Started}
Ag1 <------  {Launch}
Ag1 receives [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Input Languages : {Ag0=[+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [+safe(n0,_0)]
 [-greater_or_equal(_0,_1), +safe(_0,_1)]
 [+greater_or_equal(_0,n0)]
 [+greater_or_equal(s(_0),s(_1)), -greater_or_equal(_0,_1)]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -safe(_0,s(_1)), -safe(_2,_3), +achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -safe(_0,s(s(_1))), -safe(_2,_3), +achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Top clauses:
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Production field:
 [+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Sys <------  {Started}
Sys <------  {Started}
>>>>>>>>>>>> Solve - measure : [220, 876, 191, 217, 0, 44, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1: updated receivedCl []
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
After pruning [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Input Languages : {}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3))))]
 [-achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3)))))]
 [-achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -safe(s(_0),_1), -safe(_2,_3), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -safe(s(s(_0)),_1), -safe(_2,_3), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3)))), -safe(s(_0),s(_1)), -safe(_2,_3), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Top clauses:
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [13, 47, 15, 15, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(n0,s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 -> Ag1 : Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 <------  Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 receives [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning []
Input Languages : {Ag0=[+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2)]}
Ag1: updated receivedCl []
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Sys : Send Consequences : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Sys <------  Send Consequences : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Sys : {Finish}
Sys <------  {Finish}
Sys -> Ag0 : {Finish}
Sys -> Ag1 : {Finish}
Ag1 <------  {Finish}
Ag0 <------  {Finish}
10 (NEW) CHARACTERISTIC CLAUSES

[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]

Total execution time was 1158 ms.

Execution time was 1014 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star-FixedRoot-1
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Async
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet2
timout :600000
Time for creating graph: 0.095s
Sys -> Ag0 : {New neighbour}
Sys -> Ag1 : {New neighbour}
Ag0 <------  {New neighbour}
Ag1 <------  {New neighbour}
Sys -> Ag0 : {Start}
Sys -> Ag1 : {Start}
Sys -> Ag0 : {Launch}
Sys -> Ag1 : {Launch}
Ag1 <------  {Start}
Ag0 <------  {Start}
Ag1 -> Sys : {Started}
Ag1 <------  {Launch}
Ag0 -> Sys : {Started}
Ag0 <------  {Launch}
Sys <------  {Started}
Sys <------  {Started}
Ag1 receives [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Input Languages : {Ag0=[+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [+safe(n0,_0)]
 [-greater_or_equal(_0,_1), +safe(_0,_1)]
 [+greater_or_equal(_0,n0)]
 [+greater_or_equal(s(_0),s(_1)), -greater_or_equal(_0,_1)]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -safe(_0,s(_1)), -safe(_2,_3), +achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -safe(_0,s(s(_1))), -safe(_2,_3), +achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Top clauses:
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Production field:
 [+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [273, 876, 191, 217, 0, 44, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1: updated receivedCl []
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Sys : Send Consequences : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Sys <------  Send Consequences : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
After pruning [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Input Languages : {Ag1=[+achievable(_0,_1,_2), -safe(_0,_1), -achievable(_0,_1,_2)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3))))]
 [-achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3)))))]
 [-achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -safe(s(_0),_1), -safe(_2,_3), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -safe(s(s(_0)),_1), -safe(_2,_3), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3)))), -safe(s(_0),s(_1)), -safe(_2,_3), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Top clauses:
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [21, 47, 15, 15, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(n0,s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 -> Ag1 : Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 <------  Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 receives [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning []
Input Languages : {Ag0=[+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2)]}
Ag0 -> Sys : Send Consequences : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1: updated receivedCl []
Sys <------  Send Consequences : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Sys -> Sys : {Finish}
Sys <------  {Finish}
Sys -> Ag0 : {Finish}
Sys -> Ag1 : {Finish}
Ag0 <------  {Finish}
Ag1 <------  {Finish}
10 (NEW) CHARACTERISTIC CLAUSES

[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1138 ms.

Execution time was 1003 ms.

DCIF PROBLEM ASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Async
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-NewAsync
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet2
timout :600000
Time for creating graph: 0.097s
Sys -> Ag0 : {New neighbour}
Sys -> Ag1 : {New neighbour}
Ag0 <------  {New neighbour}
Sys -> Ag0 : {Start}
Sys -> Ag1 : {Start}
Sys -> Ag0 : {Launch}
Sys -> Ag1 : {Launch}
Ag1 <------  {New neighbour}
Ag0 <------  {Start}
Ag1 <------  {Start}
Ag0 -> Sys : {Started}
Ag1 -> Sys : {Started}
Ag0 <------  {Launch}
Ag1 <------  {Launch}
Sys <------  {Started}
Sys <------  {Started}
Ag1 receives [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Input Languages : {Ag0=[+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [+safe(n0,_0)]
 [-greater_or_equal(_0,_1), +safe(_0,_1)]
 [+greater_or_equal(_0,n0)]
 [+greater_or_equal(s(_0),s(_1)), -greater_or_equal(_0,_1)]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -safe(_0,s(_1)), -safe(_2,_3), +achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -safe(_0,s(s(_1))), -safe(_2,_3), +achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Top clauses:
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Production field:
 [+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 receives [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
----------------------------------------------------------------------
Clauses:
 [-achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3))))]
 [-achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3)))))]
 [-achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -safe(s(_0),_1), -safe(_2,_3), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -safe(s(s(_0)),_1), -safe(_2,_3), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3)))), -safe(s(_0),s(_1)), -safe(_2,_3), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Top clauses:
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 -> Ag1 : Send Clauses : [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 <------  Send Clauses : [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [26, 16, 5, 5, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0 -> Sys : Send Consequences : [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Sys <------  Send Consequences : [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0: updated receivedCl []
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3)))), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [20, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [15, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [14, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [13, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [13, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [18, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [14, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
>>>>>>>>>>>> Solve - measure : [12, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [7, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [7, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
>>>>>>>>>>>> Solve - measure : [7, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [7, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [7, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [7, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
>>>>>>>>>>>> Solve - measure : [7, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [7, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [7, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
>>>>>>>>>>>> Solve - measure : [6, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [6, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [5, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [6, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [5, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
>>>>>>>>>>>> Solve - measure : [5, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [5, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [5, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [6, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [5, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [5, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [5, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
>>>>>>>>>>>> Solve - measure : [5, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 <------  Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 receives [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
After pruning [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
Top clauses:
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 -> Ag1 : Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 <------  Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [6, 8, 2, 2, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0 -> Sys : Send Consequences : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Sys <------  Send Consequences : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [5, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
>>>>>>>>>>>> Solve - measure : [6, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [6, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
After pruning [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [5, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
>>>>>>>>>>>> Solve - measure : [591, 876, 191, 217, 0, 44, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Sys : Send Consequences : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1: updated receivedCl []
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Sys <------  Send Consequences : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
>>>>>>>>>>>> Solve - measure : [5, 4, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Sys -> Sys : {Finish}
Sys <------  {Finish}
Sys -> Ag0 : {Finish}
Sys -> Ag1 : {Finish}
Ag1 <------  {Finish}
Ag0 <------  {Finish}
10 (NEW) CHARACTERISTIC CLAUSES

[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]

Total execution time was 2144 ms.

Execution time was 2006 ms.

DCIF PROBLEM NewASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-NewAsync
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
Time for creating graph: 0.088s
2 (NEW) CHARACTERISTIC CLAUSES

[-greater_or_equal(s(s(n0)),n0), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1162 ms.

Execution time was 1014 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-NewAsync
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
Time for creating graph: 0.09s
2 (NEW) CHARACTERISTIC CLAUSES

[-greater_or_equal(s(s(n0)),n0), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1206 ms.

Execution time was 1038 ms.

DCIF PROBLEM NewASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-NewAsync
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star-FixedRoot-1
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
Time for creating graph: 0.125s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1208 ms.

Execution time was 1003 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star-FixedRoot-1
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star-FixedRoot-2
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
Time for creating graph: 0.102s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1192 ms.

Execution time was 1004 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star-FixedRoot-2
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
0-1-2-3-
Time for creating graph: 0.104s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1186 ms.

Execution time was 1004 ms.

DCIF PROBLEM TOKEN
ORDER is: 
0-1-2-3-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Async
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
Time for creating graph: 0.081s
2 (NEW) CHARACTERISTIC CLAUSES

[-greater_or_equal(s(s(n0)),n0), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1140 ms.

Execution time was 1003 ms.

DCIF PROBLEM ASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Async
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-2-1-3-0
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
2-1-3-0-
Time for creating graph: 0.115s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1215 ms.

Execution time was 1024 ms.

DCIF PROBLEM TOKEN
ORDER is: 
2-1-3-0-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-2-1-3-0
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-2-3-1-0
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
2-3-1-0-
Time for creating graph: 0.084s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1152 ms.

Execution time was 1007 ms.

DCIF PROBLEM TOKEN
ORDER is: 
2-3-1-0-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-2-3-1-0
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-3-1-0-2
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
3-1-0-2-
Time for creating graph: 0.098s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1176 ms.

Execution time was 1004 ms.

DCIF PROBLEM TOKEN
ORDER is: 
3-1-0-2-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-3-1-0-2
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-3-0-2-1
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
3-0-2-1-
Time for creating graph: 0.102s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1216 ms.

Execution time was 1036 ms.

DCIF PROBLEM TOKEN
ORDER is: 
3-0-2-1-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-3-0-2-1
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-1-2-3-0
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
1-2-3-0-
Time for creating graph: 0.1s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1201 ms.

Execution time was 1025 ms.

DCIF PROBLEM TOKEN
ORDER is: 
1-2-3-0-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-1-2-3-0
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-2-0-3-1
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
2-0-3-1-
Time for creating graph: 0.096s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1170 ms.

Execution time was 1005 ms.

DCIF PROBLEM TOKEN
ORDER is: 
2-0-3-1-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-2-0-3-1
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-3-1-2-0
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
3-1-2-0-
Time for creating graph: 0.115s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1216 ms.

Execution time was 1024 ms.

DCIF PROBLEM TOKEN
ORDER is: 
3-1-2-0-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-3-1-2-0
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Async
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet6
timout :600000
Time for creating graph: 0.112s
2 (NEW) CHARACTERISTIC CLAUSES

[-greater_or_equal(s(n0),n0), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatoneast,east(m(s(n0)),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1302 ms.

Execution time was 1057 ms.

DCIF PROBLEM ASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Async
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-NewAsync
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet6
timout :600000
Time for creating graph: 0.115s
2 (NEW) CHARACTERISTIC CLAUSES

[-greater_or_equal(s(n0),n0), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatoneast,east(m(s(n0)),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1221 ms.

Execution time was 1006 ms.

DCIF PROBLEM NewASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-NewAsync
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Async
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
Time for creating graph: 0.134s
5 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0))), -greater_or_equal(n0,s(s(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(s(s(n0)))),c(s(n0))),boatoneast,east(m(n0),c(s(s(n0)))))]
[+achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0))), -safe(s(n0),s(s(s(n0))))]
[+achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0))), -greater_or_equal(s(n0),s(s(s(n0))))]

Total execution time was 1363 ms.

Execution time was 1050 ms.

DCIF PROBLEM ASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Async
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-NewAsync
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
Time for creating graph: 0.1s
5 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0))), -greater_or_equal(n0,s(s(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(s(s(n0)))),c(s(n0))),boatoneast,east(m(n0),c(s(s(n0)))))]
[+achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0))), -safe(s(n0),s(s(s(n0))))]
[+achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0))), -greater_or_equal(s(n0),s(s(s(n0))))]

Total execution time was 1292 ms.

Execution time was 1020 ms.

DCIF PROBLEM NewASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-NewAsync
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
Time for creating graph: 0.094s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1228 ms.

Execution time was 1022 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star-FixedRoot-1
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
Time for creating graph: 0.115s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1317 ms.

Execution time was 1025 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star-FixedRoot-1
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star-FixedRoot-2
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
Time for creating graph: 0.101s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1264 ms.

Execution time was 1037 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star-FixedRoot-2
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star-FixedRoot-3
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
Time for creating graph: 0.082s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1192 ms.

Execution time was 1018 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star-FixedRoot-3
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star-FixedRoot-4
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
Time for creating graph: 0.107s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1307 ms.

Execution time was 1036 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star-FixedRoot-4
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star-FixedRoot-5
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
Time for creating graph: 0.115s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1293 ms.

Execution time was 1008 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star-FixedRoot-5
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star-FixedRoot-6
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
Time for creating graph: 0.101s
5 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0))), -greater_or_equal(n0,s(s(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(s(s(n0)))),c(s(n0))),boatoneast,east(m(n0),c(s(s(n0)))))]
[+achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0))), -safe(s(n0),s(s(s(n0))))]
[+achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0))), -greater_or_equal(s(n0),s(s(s(n0))))]

Total execution time was 1277 ms.

Execution time was 1062 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star-FixedRoot-6
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star-FixedRoot-7
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
Time for creating graph: 0.105s
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
ORDER is: 
0-1-2-3-4-5-6-
Time for creating graph: 0.105s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1258 ms.

Execution time was 1031 ms.

DCIF PROBLEM TOKEN
ORDER is: 
0-1-2-3-4-5-6-
len of order is 7
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Async
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
Time for creating graph: 0.106s
5 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0))), -greater_or_equal(n0,s(s(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
[-greater_or_equal(n0,s(s(n0))), +achievable(west(m(s(s(s(n0)))),c(s(n0))),boatoneast,east(m(n0),c(s(s(n0)))))]
[+achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0))), -safe(s(n0),s(s(s(n0))))]
[+achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0))), -greater_or_equal(s(n0),s(s(s(n0))))]

Total execution time was 1278 ms.

Execution time was 1003 ms.

DCIF PROBLEM ASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Async
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-7-6-5-4-3-2-1-0
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
ORDER is: 
7-6-5-4-3-2-1-0-
Time for creating graph: 0.112s
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-4-5-2-1-0-3-6-7
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
ORDER is: 
4-5-2-1-0-3-6-7-
Time for creating graph: 0.084s
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-1-6-7-0-4-5-3-2
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
ORDER is: 
1-6-7-0-4-5-3-2-
Time for creating graph: 0.081s
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-5-0-3-6-7-2-1-4
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
ORDER is: 
5-0-3-6-7-2-1-4-
Time for creating graph: 0.114s
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-6-1-5-4-2-7-3-0
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
ORDER is: 
6-1-5-4-2-7-3-0-
Time for creating graph: 0.108s
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-4-2-3-5-0-1
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
ORDER is: 
4-2-3-5-0-1-
Time for creating graph: 0.102s
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-3-5-4-0-1-2
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet8
timout :600000
ORDER is: 
3-5-4-0-1-2-
Time for creating graph: 0.113s
Dooone
