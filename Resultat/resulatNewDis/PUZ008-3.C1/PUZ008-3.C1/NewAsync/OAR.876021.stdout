resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet2
timout :600000
Time for creating graph: 0.115s
Sys -> Ag0 : {New neighbour}
Sys -> Ag1 : {New neighbour}
Sys -> Ag0 : {Start}
Sys -> Ag1 : {Start}
Sys -> Ag0 : {Launch}
Sys -> Ag1 : {Launch}
Ag0 <------  {New neighbour}
Ag0 <------  {Start}
Ag0 -> Sys : {Started}
Ag0 <------  {Launch}
Ag0 receives []
After pruning []
Input Languages : {Ag1=[+achievable(_0,_1,_2), -safe(_0,_1), -achievable(_0,_1,_2)]}
Ag0: updated receivedCl []
updated lstCsq []
Ag0 -> Ag1 : Send Clauses : []
Ag1 <------  {New neighbour}
Ag1 <------  {Start}
Ag1 -> Sys : {Started}
Ag1 <------  {Launch}
Ag1 <------  Send Clauses : []
Ag1 receives [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Input Languages : {}
Sys <------  {Started}
Sys <------  {Started}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [+safe(n0,_0)]
 [-greater_or_equal(_0,_1), +safe(_0,_1)]
 [+greater_or_equal(_0,n0)]
 [+greater_or_equal(s(_0),s(_1)), -greater_or_equal(_0,_1)]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -safe(_0,s(_1)), -safe(_2,_3), +achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -safe(_0,s(s(_1))), -safe(_2,_3), +achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Top clauses:
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Production field:
 [+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [199, 876, 191, 217, 0, 44, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1: updated receivedCl []
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
After pruning [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Input Languages : {Ag1=[+achievable(_0,_1,_2), -safe(_0,_1), -achievable(_0,_1,_2)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3))))]
 [-achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3)))))]
 [-achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -safe(s(_0),_1), -safe(_2,_3), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -safe(s(s(_0)),_1), -safe(_2,_3), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3)))), -safe(s(_0),s(_1)), -safe(_2,_3), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Top clauses:
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -safe(_0,_1), -achievable(_0,_1,_2), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [12, 47, 15, 15, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(n0,s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 -> Ag1 : Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 <------  Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 receives [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning []
Input Languages : {}
Ag1: updated receivedCl []
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : []
Ag0 <------  Send Clauses : []
Ag0 receives [[-greater_or_equal(n0,s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
After pruning []
Input Languages : {Ag1=[+achievable(_0,_1,_2), -safe(_0,_1), -achievable(_0,_1,_2)]}
Ag0: updated receivedCl [[-greater_or_equal(n0,s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 -> Sys : Send Consequences : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Sys <------  Send Consequences : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 -> Sys : {Finish}
Sys <------  {Finish}
Sys -> Ag0 : {Finish}
Sys -> Ag1 : {Finish}
Ag1 <------  {Finish}
Ag0 <------  {Finish}
2 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1159 ms.

Execution time was 1006 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star-FixedRoot-1
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet2
timout :600000
Time for creating graph: 0.113s
Sys -> Ag0 : {New neighbour}
Sys -> Ag1 : {New neighbour}
Sys -> Ag0 : {Start}
Sys -> Ag1 : {Start}
Sys -> Ag0 : {Launch}
Sys -> Ag1 : {Launch}
Ag0 <------  {New neighbour}
Ag1 <------  {New neighbour}
Ag0 <------  {Start}
Ag1 <------  {Start}
Ag0 -> Sys : {Started}
Ag0 <------  {Launch}
Ag1 -> Sys : {Started}
Ag1 <------  {Launch}
Sys <------  {Started}
Sys <------  {Started}
Ag1 receives [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Input Languages : {Ag0=[+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [+safe(n0,_0)]
 [-greater_or_equal(_0,_1), +safe(_0,_1)]
 [+greater_or_equal(_0,n0)]
 [+greater_or_equal(s(_0),s(_1)), -greater_or_equal(_0,_1)]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -safe(_0,s(_1)), -safe(_2,_3), +achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -safe(_0,s(s(_1))), -safe(_2,_3), +achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Top clauses:
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Production field:
 [+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [273, 876, 191, 217, 0, 44, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1: updated receivedCl []
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
After pruning [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Input Languages : {}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3))))]
 [-achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3)))))]
 [-achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -safe(s(_0),_1), -safe(_2,_3), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -safe(s(s(_0)),_1), -safe(_2,_3), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3)))), -safe(s(_0),s(_1)), -safe(_2,_3), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Top clauses:
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [17, 47, 15, 15, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(n0,s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 -> Ag1 : Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 <------  Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 receives [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning []
Input Languages : {Ag0=[+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2)]}
Ag1: updated receivedCl []
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Sys : Send Consequences : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Sys <------  Send Consequences : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Sys : {Finish}
Sys <------  {Finish}
Sys -> Ag0 : {Finish}
Sys -> Ag1 : {Finish}
Ag1 <------  {Finish}
Ag0 <------  {Finish}
10 (NEW) CHARACTERISTIC CLAUSES

[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]

Total execution time was 1153 ms.

Execution time was 1005 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star-FixedRoot-1
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Async
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet2
timout :600000
Time for creating graph: 0.105s
Sys -> Ag0 : {New neighbour}
Sys -> Ag1 : {New neighbour}
Sys -> Ag0 : {Start}
Sys -> Ag1 : {Start}
Sys -> Ag0 : {Launch}
Sys -> Ag1 : {Launch}
Ag0 <------  {New neighbour}
Ag1 <------  {New neighbour}
Ag0 <------  {Start}
Ag1 <------  {Start}
Ag0 -> Sys : {Started}
Ag1 -> Sys : {Started}
Ag0 <------  {Launch}
Ag1 <------  {Launch}
Sys <------  {Started}
Sys <------  {Started}
Ag1 receives [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Input Languages : {Ag0=[+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [+safe(n0,_0)]
 [-greater_or_equal(_0,_1), +safe(_0,_1)]
 [+greater_or_equal(_0,n0)]
 [+greater_or_equal(s(_0),s(_1)), -greater_or_equal(_0,_1)]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -safe(_0,s(_1)), -safe(_2,_3), +achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -safe(_0,s(s(_1))), -safe(_2,_3), +achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Top clauses:
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Production field:
 [+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
>>>>>>>>>>>> Solve - measure : [265, 876, 191, 217, 0, 44, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1: updated receivedCl []
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
After pruning [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Input Languages : {Ag1=[+achievable(_0,_1,_2), -safe(_0,_1), -achievable(_0,_1,_2)]}
Starting SolveToClause...
Launching solver...
Ag1 -> Sys : Send Consequences : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
----------------------------------------------------------------------
Clauses:
 [-achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3))))]
 [-achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3)))))]
 [-achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -safe(s(_0),_1), -safe(_2,_3), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -safe(s(s(_0)),_1), -safe(_2,_3), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3)))), -safe(s(_0),s(_1)), -safe(_2,_3), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Top clauses:
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
 [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Sys <------  Send Consequences : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [18, 47, 15, 15, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(n0,s(n0)), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(n0,s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 -> Ag1 : Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 <------  Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 receives [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning []
Input Languages : {Ag0=[+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2)]}
Ag1: updated receivedCl []
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 -> Sys : Send Consequences : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Sys <------  Send Consequences : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Sys -> Sys : {Finish}
Sys <------  {Finish}
Sys -> Ag0 : {Finish}
Sys -> Ag1 : {Finish}
Ag0 <------  {Finish}
Ag1 <------  {Finish}
10 (NEW) CHARACTERISTIC CLAUSES

[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1144 ms.

Execution time was 1004 ms.

DCIF PROBLEM ASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Async
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-NewAsync
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet2
timout :600000
Time for creating graph: 0.106s
Sys -> Ag0 : {New neighbour}
Sys -> Ag1 : {New neighbour}
Ag1 <------  {New neighbour}
Sys -> Ag0 : {Start}
Sys -> Ag1 : {Start}
Sys -> Ag0 : {Launch}
Sys -> Ag1 : {Launch}
Ag0 <------  {New neighbour}
Ag1 <------  {Start}
Ag0 <------  {Start}
Ag1 -> Sys : {Started}
Ag1 <------  {Launch}
Ag0 -> Sys : {Started}
Ag0 <------  {Launch}
Ag1 receives [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Input Languages : {Ag0=[+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [+safe(n0,_0)]
 [-greater_or_equal(_0,_1), +safe(_0,_1)]
 [+greater_or_equal(_0,n0)]
 [+greater_or_equal(s(_0),s(_1)), -greater_or_equal(_0,_1)]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -safe(_0,s(_1)), -safe(_2,_3), +achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -safe(_0,s(s(_1))), -safe(_2,_3), +achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Top clauses:
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Production field:
 [+achievable(_0,_1,_2), +safe(_0,_1), -achievable(_0,_1,_2), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Sys <------  {Started}
Sys <------  {Started}
Ag1 -> Ag0 : Send Clauses : [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 receives [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
After pruning [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Input Languages : {Ag1=[+achievable(_0,_1,_2), -safe(_0,_1), -achievable(_0,_1,_2)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3))))]
 [-achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3)))))]
 [-achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -safe(s(_0),_1), -safe(_2,_3), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -safe(s(s(_0)),_1), -safe(_2,_3), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3)))), -safe(s(_0),s(_1)), -safe(_2,_3), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Top clauses:
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 -> Ag1 : Send Clauses : [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 <------  Send Clauses : [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [17, 17, 5, 5, 0, 0, 0, 0]
Solver finished.
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
SolveToClause Finished!
Ag0 -> Sys : Send Consequences : [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0: updated receivedCl []
Sys <------  Send Consequences : [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3)))), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [15, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [15, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [13, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [13, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [12, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [11, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [7, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [10, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(s(n0))),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
>>>>>>>>>>>> Solve - measure : [9, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [9, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [9, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
Ag0 <------  Send Clauses : [[+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [9, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [9, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
>>>>>>>>>>>> Solve - measure : [9, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 receives [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
After pruning [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]]
Input Languages : {Ag1=[+achievable(s(s(n0)),s(s(n0)),n0), -safe(s(s(n0)),s(s(n0))), -achievable(s(s(n0)),s(s(n0)),n0)]}
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Starting SolveToClause...
Launching solver...
----------------------------------------------------------------------
Clauses:
 [-safe(_0,_1), -safe(_2,s(_3)), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(_3)))), -achievable(west(m(_0),c(s(_1))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(_2,s(s(_3))), +achievable(west(m(_0),c(_1)),boatoneast,east(m(_2),c(s(s(_3))))), -achievable(west(m(_0),c(s(s(_1)))),boatonwest,east(m(_2),c(_3)))]
 [-safe(_0,_1), -safe(s(_2),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3))), -achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),_1), +achievable(west(m(s(_0)),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(_3)))]
 [-safe(_0,_1), -safe(s(s(_2)),_3), +achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3))), -achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3)))]
 [-safe(_2,_3), -safe(s(s(_0)),_1), +achievable(west(m(s(s(_0))),c(_1)),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(s(_2))),c(_3)))]
 [-safe(_2,_3), -safe(s(_0),s(_1)), +achievable(west(m(s(_0)),c(s(_1))),boatonwest,east(m(_2),c(_3))), -achievable(west(m(_0),c(_1)),boatoneast,east(m(s(_2)),c(s(_3))))]
 [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Top clauses:
 [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0))))]
Production field:
 [+achievable(_0,_1,_2), -achievable(_0,_1,_2), -safe(_0,_1), -greater_or_equal(_0,_1), +safe(_0,_1), -greater_or_equal(_0,_1), +greater_or_equal(_0,_1), -achievable(_0,_1,_2), -safe(_0,_1), +achievable(_0,_1,_2)]

>>>>>>>>>>>> Solving at depth : -1( real 0)
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag1 -> Ag0 : Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -safe(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0))))]]
Ag0 <------  Send Clauses : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))]]
>>>>>>>>>>>> Solve - measure : [8, 5, 1, 1, 0, 0, 0, 0]
Solver finished.
SolveToClause Finished!
Ag0: updated receivedCl [[-greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(s(n0)),s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -safe(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(s(n0))), -greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(s(n0)),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(s(n0)),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [-greater_or_equal(n0,s(n0)), -greater_or_equal(s(n0),s(s(s(n0)))), -safe(s(s(n0)),s(s(s(n0)))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0))))]]
updated lstCsq [[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]]
Sys -> Sys : {Finish}
Sys <------  {Finish}
Sys -> Ag0 : {Finish}
Sys -> Ag1 : {Finish}
Ag0 <------  {Finish}
Ag1 <------  {Finish}
System -> Ag1 : {Finish}
>>>>>>>>>>>> Solve - measure : [613, 876, 191, 217, 0, 44, 0, 0]
Solver finished.
SolveToClause Finished!
Ag1 -> Sys : Send Consequences : [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1: updated receivedCl []
updated lstCsq [[-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))], [+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(n0,s(s(n0)))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -safe(s(n0),s(s(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [-greater_or_equal(s(n0),s(s(n0))), +achievable(west(m(n0),c(s(s(n0)))),boatoneast,east(m(s(s(s(n0)))),c(s(n0)))), -greater_or_equal(s(n0),s(s(s(n0))))], [+achievable(west(m(s(s(n0))),c(s(s(n0)))),boatoneast,east(m(s(n0)),c(s(n0))))], [-greater_or_equal(n0,s(n0)), +achievable(west(m(s(n0)),c(s(s(n0)))),boatoneast,east(m(s(s(n0))),c(s(n0))))]]
Ag1 <------  {Finish}
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 2158 ms.

Execution time was 2016 ms.

DCIF PROBLEM NewASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-NewAsync
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
Time for creating graph: 0.109s
2 (NEW) CHARACTERISTIC CLAUSES

[-greater_or_equal(s(s(n0)),n0), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1181 ms.

Execution time was 1003 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-NewAsync
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
Time for creating graph: 0.108s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1191 ms.

Execution time was 1004 ms.

DCIF PROBLEM NewASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-NewAsync
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star-FixedRoot-1
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
Time for creating graph: 0.111s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1188 ms.

Execution time was 1005 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star-FixedRoot-1
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Star-FixedRoot-2
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
Time for creating graph: 0.104s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1179 ms.

Execution time was 1003 ms.

DCIF PROBLEM STAR
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Star-FixedRoot-2
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
0-1-2-3-
Time for creating graph: 0.113s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1203 ms.

Execution time was 1003 ms.

DCIF PROBLEM TOKEN
ORDER is: 
0-1-2-3-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Async
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
Time for creating graph: 0.108s
2 (NEW) CHARACTERISTIC CLAUSES

[-greater_or_equal(s(s(n0)),n0), -greater_or_equal(s(n0),s(s(s(n0)))), +achievable(west(m(s(n0)),c(s(s(s(n0))))),boatoneast,east(m(s(s(n0))),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1179 ms.

Execution time was 1002 ms.

DCIF PROBLEM ASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Async
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-2-1-3-0
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
2-1-3-0-
Time for creating graph: 0.11s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1185 ms.

Execution time was 1003 ms.

DCIF PROBLEM TOKEN
ORDER is: 
2-1-3-0-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-2-1-3-0
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-2-3-1-0
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
2-3-1-0-
Time for creating graph: 0.127s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1204 ms.

Execution time was 1003 ms.

DCIF PROBLEM TOKEN
ORDER is: 
2-3-1-0-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-2-3-1-0
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-3-1-0-2
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
3-1-0-2-
Time for creating graph: 0.114s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1191 ms.

Execution time was 1002 ms.

DCIF PROBLEM TOKEN
ORDER is: 
3-1-0-2-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-3-1-0-2
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-3-0-2-1
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
3-0-2-1-
Time for creating graph: 0.114s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1191 ms.

Execution time was 1004 ms.

DCIF PROBLEM TOKEN
ORDER is: 
3-0-2-1-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-3-0-2-1
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-1-2-3-0
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
1-2-3-0-
Time for creating graph: 0.111s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1187 ms.

Execution time was 1003 ms.

DCIF PROBLEM TOKEN
ORDER is: 
1-2-3-0-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-1-2-3-0
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-2-0-3-1
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
2-0-3-1-
Time for creating graph: 0.112s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1193 ms.

Execution time was 1003 ms.

DCIF PROBLEM TOKEN
ORDER is: 
2-0-3-1-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-2-0-3-1
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Token-FixedOrder-3-1-2-0
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet4
timout :600000
ORDER is: 
3-1-2-0-
Time for creating graph: 0.119s
1 (NEW) CHARACTERISTIC CLAUSES

[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1195 ms.

Execution time was 1004 ms.

DCIF PROBLEM TOKEN
ORDER is: 
3-1-2-0-
len of order is 4
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Token-FixedOrder-3-1-2-0
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-Async
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet6
timout :600000
Time for creating graph: 0.149s
2 (NEW) CHARACTERISTIC CLAUSES

[-greater_or_equal(s(n0),n0), -greater_or_equal(s(s(n0)),s(s(s(n0)))), +achievable(west(m(s(s(n0))),c(s(s(s(n0))))),boatoneast,east(m(s(n0)),c(n0)))]
[+achievable(west(m(s(s(s(n0)))),c(s(s(s(n0))))),boatonwest,east(m(n0),c(n0)))]

Total execution time was 1284 ms.

Execution time was 1027 ms.

DCIF PROBLEM ASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-Async
resultFilename :PUZ008-3.C1i2
nethod:DICF-PB-NewAsync
pbBasename :PUZ008-3.C1i2
variantSuffix:_all_ld-1--1
distr suff:_kmet6
timout :600000
Time for creating graph: 0.121s
0 (NEW) CHARACTERISTIC CLAUSES


Total execution time was 1249 ms.

Execution time was 1013 ms.

DCIF PROBLEM NewASYNC
PUZ008-3.C1i2_all_ld-1--1_DICF-PB-NewAsync
